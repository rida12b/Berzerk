"""
Module d'Agents IA Sp√©cialis√©s pour le Projet BERZERK
====================================================

Ce module contient une √©quipe d'agents IA sp√©cialis√©s pour analyser les news financi√®res
sous diff√©rents angles. Chaque agent a une expertise unique et apporte sa perspective
√† l'analyse globale.

Auteur: BERZERK Team
Phase: 2 - Agents IA Sp√©cialis√©s
"""

import os
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# LangChain Imports
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import PromptTemplate, ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.tools import tool
from pydantic import BaseModel, Field

# Imports pour les outils
from langchain_community.tools.tavily_search import TavilySearchResults
import yfinance as yf

# --- CONFIGURATION & SETUP ---
load_dotenv()

# Initialisation du LLM avec temp√©rature plus √©lev√©e pour la personnalit√© des agents
try:
    llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash-lite-preview-06-17", 
    temperature=0.3
    # Le param√®tre convert_system_message_to_human est maintenant g√©r√© automatiquement
)
    print("‚úÖ LLM initialis√© avec succ√®s pour les agents IA")
except Exception as e:
    print(f"‚ùå Erreur d'initialisation du LLM pour les agents: {e}")
    llm = None

# --- OUTILS POUR AGENTS AUGMENT√âS ---

# 1. Outil de recherche web avec Tavily
try:
    web_search_tool = TavilySearchResults(
        max_results=3,  # Limiter pour √©viter la surcharge d'informations
        search_depth="basic"  # Recherche basique pour √™tre plus rapide
    )
    print("‚úÖ Outil de recherche web (Tavily) initialis√©")
except Exception as e:
    print(f"‚ùå Erreur d'initialisation de Tavily: {e}")
    web_search_tool = None

# 2. Outil de donn√©es financi√®res avec yfinance
@tool
def get_stock_price(ticker: str) -> str:
    """R√©cup√®re le prix actuel et la variation journali√®re pour un ticker donn√©."""
    try:
        stock = yf.Ticker(ticker)
        hist = stock.history(period="2d")  # 2 jours pour calculer la variation
        if hist.empty:
            return f"‚ùå Donn√©es non trouv√©es pour {ticker}"
        
        # Prix actuel (derni√®re cl√¥ture)
        current_price = hist['Close'].iloc[-1]
        
        # Variation par rapport √† la veille
        if len(hist) >= 2:
            previous_price = hist['Close'].iloc[-2]
            change_percent = ((current_price - previous_price) / previous_price) * 100
            change_symbol = "üìà" if change_percent > 0 else "üìâ" if change_percent < 0 else "‚û°Ô∏è"
            
            return f"üí∞ {ticker}: {current_price:.2f} USD {change_symbol} {change_percent:+.2f}% vs hier"
        else:
            return f"üí∞ {ticker}: {current_price:.2f} USD (variation non disponible)"
            
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es pour {ticker}: {str(e)}"

@tool
def get_market_sentiment(ticker: str) -> str:
    """R√©cup√®re des informations sur le sentiment du march√© pour un ticker."""
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        
        # Informations cl√©s
        market_cap = info.get('marketCap', 'N/A')
        pe_ratio = info.get('trailingPE', 'N/A')
        volume = info.get('averageVolume', 'N/A')
        
        # Formatage des grandes valeurs
        if isinstance(market_cap, (int, float)):
            if market_cap > 1e12:
                market_cap_str = f"{market_cap/1e12:.1f}T USD"
            elif market_cap > 1e9:
                market_cap_str = f"{market_cap/1e9:.1f}B USD"
            else:
                market_cap_str = f"{market_cap/1e6:.1f}M USD"
        else:
            market_cap_str = "N/A"
            
        return f"üìä {ticker} - Cap: {market_cap_str} | P/E: {pe_ratio} | Volume moy: {volume:,}" if isinstance(volume, int) else f"üìä {ticker} - Cap: {market_cap_str} | P/E: {pe_ratio} | Volume moy: {volume}"
        
    except Exception as e:
        return f"‚ùå Erreur sentiment march√© pour {ticker}: {str(e)}"

print("‚úÖ Outils financiers (yfinance) initialis√©s")

# --- MOD√àLES PYDANTIC POUR LA VALIDATION ---

class AgentSelection(BaseModel):
    """Mod√®le pour la s√©lection d'agents par le routeur."""
    agents: List[Dict[str, str]] = Field(
        description="Liste des agents s√©lectionn√©s avec leur type et focus"
    )

class TickerIdentification(BaseModel):
    """Mod√®le pour la sortie de l'agent Ticker Hunter."""
    ticker: str = Field(description="Symbole boursier de l'entreprise")
    nom_entreprise: str = Field(description="Nom complet de l'entreprise")
    justification_impact: str = Field(description="Justification de l'impact sur cette entreprise")

class TickerHunterResult(BaseModel):
    """Mod√®le pour la sortie compl√®te de l'agent Ticker Hunter."""
    tickers_identifies: List[TickerIdentification] = Field(
        description="Liste des tickers identifi√©s avec leurs justifications"
    )

# --- PROFILS D'AGENTS SP√âCIALIS√âS ---

# Ticker Hunter - Agent sp√©cialis√© dans l'identification de tickers actionnables
ticker_hunter_template = PromptTemplate(
    input_variables=["news_summary", "full_article_text"],
    template="""
Tu es "The Ticker Hunter", un analyste financier redoutable pour le fonds BERZERK. Ta seule et unique mission est d'identifier des opportunit√©s de trading actionnables √† partir d'informations. Tu ignores les concepts vagues et tu te concentres sur les entreprises cot√©es.

Analyse le r√©sum√© et le texte complet de l'article ci-dessous.

**R√©sum√© :**
{news_summary}

**Texte Complet :**
{full_article_text}

---
**TACHE :**
Identifie les 1 √† 5 entreprises cot√©es en bourse (et leurs tickers boursiers) les plus directement et significativement impact√©es par cette news.
Pour chaque entreprise, fournis une justification concise expliquant POURQUOI elle est impact√©e.

R√©ponds IMP√âRATIVEMENT au format JSON suivant, et rien d'autre. Si aucune action n'est clairement identifiable, retourne une liste vide.

{{
    "tickers_identifies": [
        {{
            "ticker": "AAPL",
            "nom_entreprise": "Apple Inc.",
            "justification_impact": "L'article mentionne des probl√®mes dans la cha√Æne d'approvisionnement des iPhones en Chine."
        }},
        {{
            "ticker": "QCOM",
            "nom_entreprise": "Qualcomm",
            "justification_impact": "En tant que fournisseur cl√© d'Apple, Qualcomm serait directement affect√© par un ralentissement de la production."
        }}
    ]
}}

**R√àGLES CRITIQUES :**
- Seules les entreprises publiques avec des tickers boursiers r√©els (NYSE, NASDAQ, etc.)
- Impact direct et mesurable sur le business
- Justification factuelle bas√©e sur le contenu de l'article
- Maximum 5 tickers pour rester focus
- Si aucun ticker n'est clairement identifiable, retourne une liste vide
"""
)

# Analyste Actions - Sp√©cialis√© dans l'analyse d'actions individuelles
analyste_actions_template = PromptTemplate(
    input_variables=["focus", "news_summary", "full_article_text"],
    template="""
Tu es un Analyste Financier Senior sp√©cialis√© en actions pour le fonds d'investissement BERZERK.

**Ton Focus Exclusif : L'action {focus}.**

Ta mission est d'√©valuer l'impact d'une nouvelle sur cette action sp√©cifique. Ignore les autres aspects.
Tu dois analyser avec pr√©cision l'impact potentiel sur le cours de l'action, les volumes, et les perspectives.

R√©sum√© de la news :
{news_summary}

Texte complet de l'article :
{full_article_text}

---
Produis une analyse concise au format Markdown avec les sections suivantes :

### üéØ √âvaluation sur {focus}
- **Sentiment :** (Positif, N√©gatif, Neutre)
- **Impact (1-10) :** (Note l'impact potentiel sur le cours de l'action)
- **Justification :** (Explique ton raisonnement en 2-3 phrases claires, en te basant sur des faits de l'article.)

### üìä Analyse Technique
- **Catalyseurs identifi√©s :** (√âl√©ments qui pourraient faire bouger le cours)
- **Risques potentiels :** (√âl√©ments n√©gatifs √† surveiller)

### üéØ Recommandation d'Action
- **Horizon :** (Court Terme, Moyen Terme, Long Terme)
- **Action :** (Surveiller, Renforcer la position, All√©ger la position, Ne rien faire)
- **Niveau de confiance :** (Faible, Moyen, √âlev√©)
"""
)

# Analyste Sectoriel - Sp√©cialis√© dans l'analyse de secteurs d'activit√©
analyste_sectoriel_template = PromptTemplate(
    input_variables=["focus", "news_summary", "full_article_text"],
    template="""
Tu es un Analyste Sectoriel Expert pour le fonds d'investissement BERZERK.

**Ton Focus Exclusif : Le secteur {focus}.**

Ta mission est d'analyser l'impact d'une nouvelle sur l'ensemble du secteur. Tu dois identifier les tendances,
les dynamiques concurrentielles et les implications pour toutes les entreprises du secteur.

R√©sum√© de la news :
{news_summary}

Texte complet de l'article :
{full_article_text}

---
Produis une analyse sectorielle au format Markdown avec les sections suivantes :

### üè≠ Impact Sectoriel sur {focus}
- **Sentiment Global :** (Positif, N√©gatif, Neutre)
- **Ampleur d'Impact (1-10) :** (Note l'impact sur l'ensemble du secteur)
- **Justification :** (Explique les m√©canismes d'impact sur le secteur)

### üîÑ Dynamiques Concurrentielles
- **Gagnants potentiels :** (Quelles entreprises/sous-secteurs pourraient b√©n√©ficier)
- **Perdants potentiels :** (Quelles entreprises/sous-secteurs pourraient souffrir)
- **Changements structurels :** (√âvolutions durables attendues)

### üéØ Implications Strat√©giques
- **Opportunit√©s d'investissement :** (Nouvelles opportunit√©s cr√©√©es)
- **Risques sectoriels :** (Nouveaux risques √† surveiller)
- **Horizon temporel :** (Court/Moyen/Long terme pour les impacts)
"""
)

# Strat√©giste G√©opolitique - Sp√©cialis√© dans l'analyse g√©opolitique et macro√©conomique
strategiste_geopolitique_template = PromptTemplate(
    input_variables=["focus", "news_summary", "full_article_text"],
    template="""
Tu es un Strat√©giste G√©opolitique Senior pour le fonds d'investissement BERZERK.

**Ton Focus Exclusif : {focus}.**

Ta mission est d'analyser les implications g√©opolitiques et macro√©conomiques d'une nouvelle.
Tu dois identifier les ramifications sur les relations internationales, les politiques √©conomiques,
et les flux de capitaux mondiaux.

R√©sum√© de la news :
{news_summary}

Texte complet de l'article :
{full_article_text}

---
Produis une analyse g√©opolitique au format Markdown avec les sections suivantes :

### üåç Analyse G√©opolitique : {focus}
- **Sentiment G√©opolitique :** (Stabilisant, D√©stabilisant, Neutre)
- **Niveau de Risque (1-10) :** (Impact sur la stabilit√© g√©opolitique)
- **Justification :** (Explique les m√©canismes g√©opolitiques en jeu)

### üó∫Ô∏è Implications R√©gionales
- **R√©gions affect√©es :** (Zones g√©ographiques principales concern√©es)
- **Acteurs cl√©s :** (Pays, institutions, alliances impliqu√©s)
- **Tensions potentielles :** (Nouveaux conflits ou r√©solutions possibles)

### üí∞ Impact sur les March√©s
- **Devises affect√©es :** (Monnaies qui pourraient √™tre impact√©es)
- **Secteurs sensibles :** (Industries particuli√®rement expos√©es)
- **Flux de capitaux :** (R√©allocations d'investissement attendues)

### üéØ Recommandations Strat√©giques
- **Positionnement recommand√© :** (D√©fensif, Offensif, Neutre)
- **Horizon d'impact :** (Court/Moyen/Long terme)
- **Indicateurs √† surveiller :** (Signaux d'alerte ou d'opportunit√©)
"""
)

# Agent Investisseur Final - Le superviseur qui prend la d√©cision finale
investisseur_final_template = PromptTemplate(
    input_variables=["debriefing_equipe", "capital_disponible", "actionable_tickers"],
    template="""
Tu es l'Agent Investisseur en chef du fonds BERZERK. Tu es froid, logique, et uniquement guid√© par la performance et la gestion du risque.

Ta mission est de prendre la d√©cision finale d'investissement bas√©e sur le rapport consolid√© de ton √©quipe d'analystes sp√©cialis√©s.

**Tickers Identifi√©s par le Ticker Hunter :**
{actionable_tickers}

**Rapport de l'√âquipe d'Analystes :**
---
{debriefing_equipe}
---

**Contexte Financier Actuel :**
- Capital total disponible pour de nouveaux trades : {capital_disponible} ‚Ç¨

**TACHE FINALE :**
Sur la base EXCLUSIVE des informations ci-dessus, produis une d√©cision d'investissement structur√©e au format JSON. Ne rien ajouter d'autre.

**PRIORIT√â :** Concentre-toi sur les tickers sp√©cifiques identifi√©s par le Ticker Hunter. Ignore les analyses macro g√©n√©rales.

Le format JSON doit contenir les cl√©s suivantes :
- "decision": "ACHETER", "VENDRE", "SURVEILLER" ou "IGNORER".
- "ticker": Le ticker de l'action concern√©e (string, ou null si IGNORER).
- "confiance": "√âLEV√âE", "MOYENNE", "FAIBLE" (string).
- "justification_synthetique": Une phrase unique et directe expliquant la d√©cision.
- "allocation_capital_pourcentage": Le pourcentage du capital disponible √† allouer √† ce trade (nombre flottant, de 0.0 √† 5.0). Allouer 0 si la d√©cision n'est pas "ACHETER". Une allocation typique pour une confiance MOYENNE est 1%, √âLEV√âE est 2-3%.
- "points_cles_positifs": Une liste de 2-3 points cl√©s positifs tir√©s du rapport.
- "points_cles_negatifs_risques": Une liste de 2-3 risques ou points n√©gatifs tir√©s du rapport.
"""
)

# Dictionnaire des profils d'agents
AGENT_PROFILES = {
    "ticker_hunter": ticker_hunter_template,
    "analyste_actions": analyste_actions_template,
    "analyste_sectoriel": analyste_sectoriel_template,
    "strategiste_geopolitique": strategiste_geopolitique_template,
    "investisseur_final": investisseur_final_template,
}

# --- FONCTIONS PRINCIPALES ---

def route_to_agents(entities: List[str], news_summary: str) -> List[Dict[str, str]]:
    """
    Routeur intelligent qui s√©lectionne les agents appropri√©s selon les entit√©s d√©tect√©es.
    
    Args:
        entities: Liste des entit√©s d√©tect√©es (tickers, secteurs, concepts)
        news_summary: R√©sum√© de la news
    
    Returns:
        Liste de dictionnaires avec agent_type et focus pour chaque agent s√©lectionn√©
    """
    if not llm:
        print("‚ùå LLM non disponible pour le routage")
        return []
    
    # Prompt pour le routeur intelligent
    router_template = PromptTemplate(
        input_variables=["entities", "news_summary", "available_agents"],
        template="""
Tu es le Chef d'Orchestre du syst√®me d'analyse BERZERK. Ta mission est de s√©lectionner
la meilleure √©quipe d'agents IA pour analyser une news financi√®re.

**Agents disponibles :**
{available_agents}

**Entit√©s d√©tect√©es dans la news :**
{entities}

**R√©sum√© de la news :**
{news_summary}

**Instructions :**
1. Analyse les entit√©s et le contenu de la news
2. S√©lectionne 1 √† 3 agents maximum (√©vite la redondance)
3. Pour chaque agent, d√©finis un focus pr√©cis bas√© sur les entit√©s

**Crit√®res de s√©lection :**
- **analyste_actions** : Si des tickers d'actions sp√©cifiques sont mentionn√©s (ex: AAPL, TSLA)
- **analyste_sectoriel** : Si des secteurs d'activit√© sont concern√©s (ex: Tech, Pharma, √ânergie)
- **strategiste_geopolitique** : Si des aspects g√©opolitiques, mon√©taires ou macro√©conomiques sont pr√©sents

**Format de r√©ponse attendu (JSON strict) :**
{{
    "agents": [
        {{"agent_type": "analyste_actions", "focus": "AAPL"}},
        {{"agent_type": "analyste_sectoriel", "focus": "Technologie"}},
        {{"agent_type": "strategiste_geopolitique", "focus": "Relations commerciales USA-Chine"}}
    ]
}}

Assure-toi que chaque focus soit sp√©cifique et pertinent pour l'agent s√©lectionn√©.
"""
    )
    
    try:
        # Pr√©paration des donn√©es
        available_agents = """
- analyste_actions : Analyse d'actions individuelles et de tickers sp√©cifiques
- analyste_sectoriel : Analyse de secteurs d'activit√© et industries
- strategiste_geopolitique : Analyse g√©opolitique et macro√©conomique
"""
        
        # Configuration du parser JSON
        parser = JsonOutputParser(pydantic_object=AgentSelection)
        
        # Cr√©ation de la cha√Æne LangChain
        chain = router_template | llm | parser
        
        # Ex√©cution du routage
        result = chain.invoke({
            "entities": ", ".join(entities),
            "news_summary": news_summary,
            "available_agents": available_agents
        })
        
        selected_agents = result.get("agents", [])
        print(f"‚úÖ Routeur : {len(selected_agents)} agent(s) s√©lectionn√©(s)")
        
        return selected_agents
        
    except Exception as e:
        print(f"‚ùå Erreur dans le routage des agents: {e}")
        # Fallback : s√©lection basique bas√©e sur les entit√©s
        fallback_agents = []
        
        # Recherche de tickers (g√©n√©ralement en majuscules, 2-5 caract√®res)
        tickers = [entity for entity in entities if entity.isupper() and 2 <= len(entity) <= 5]
        if tickers:
            fallback_agents.append({"agent_type": "analyste_actions", "focus": tickers[0]})
        
        # Recherche de secteurs (mots-cl√©s courants)
        secteurs = ["tech", "technologie", "√©nergie", "finance", "sant√©", "pharma", "automobile"]
        for entity in entities:
            if any(secteur in entity.lower() for secteur in secteurs):
                fallback_agents.append({"agent_type": "analyste_sectoriel", "focus": entity})
                break
        
        return fallback_agents

def run_agent_analysis(
    agent_type: str, 
    focus: str, 
    news_summary: str, 
    full_article_text: str
) -> str:
    """
    Ex√©cute l'analyse d'un agent sp√©cifique.
    
    Args:
        agent_type: Type d'agent (cl√© du dictionnaire AGENT_PROFILES)
        focus: Focus sp√©cifique pour l'analyse
        news_summary: R√©sum√© de la news
        full_article_text: Texte complet de l'article
    
    Returns:
        Analyse format√©e en Markdown ou message d'erreur
    """
    if not llm:
        return "‚ùå **Erreur :** LLM non disponible pour l'analyse"
    
    if agent_type not in AGENT_PROFILES:
        return f"‚ùå **Erreur :** Agent '{agent_type}' non reconnu"
    
    try:
        # R√©cup√©ration du template de l'agent
        agent_prompt = AGENT_PROFILES[agent_type]
        
        # Cr√©ation de la cha√Æne LangChain
        chain = agent_prompt | llm
        
        # Ex√©cution de l'analyse
        analysis_result = chain.invoke({
            "focus": focus,
            "news_summary": news_summary,
            "full_article_text": full_article_text
        })
        
        print(f"‚úÖ Analyse termin√©e - Agent: {agent_type}, Focus: {focus}")
        return analysis_result.content if hasattr(analysis_result, 'content') else str(analysis_result)
        
    except Exception as e:
        error_msg = f"‚ùå **Erreur lors de l'analyse** - Agent: {agent_type}, Focus: {focus}\n**D√©tail:** {str(e)}"
        print(error_msg)
        return error_msg

def run_ticker_hunter(news_summary: str, full_article_text: str) -> Dict[str, List[Dict]]:
    """
    Ex√©cute l'agent Ticker Hunter pour identifier les tickers actionnables.
    
    Args:
        news_summary: R√©sum√© de la news
        full_article_text: Texte complet de l'article
    
    Returns:
        Dictionnaire avec la liste des tickers identifi√©s
    """
    if not llm:
        print("‚ùå LLM non disponible pour le Ticker Hunter")
        return {"tickers_identifies": []}
    
    try:
        # Configuration du parser JSON avec validation Pydantic
        parser = JsonOutputParser(pydantic_object=TickerHunterResult)
        
        # R√©cup√©ration du template du Ticker Hunter
        ticker_hunter_prompt = AGENT_PROFILES["ticker_hunter"]
        
        # Cr√©ation de la cha√Æne LangChain
        chain = ticker_hunter_prompt | llm | parser
        
        # Ex√©cution de l'analyse
        result = chain.invoke({
            "news_summary": news_summary,
            "full_article_text": full_article_text
        })
        
        tickers_found = result.get("tickers_identifies", [])
        print(f"‚úÖ Ticker Hunter : {len(tickers_found)} ticker(s) identifi√©(s)")
        
        if tickers_found:
            for ticker_info in tickers_found:
                # Gestion des objets Pydantic ET des dictionnaires
                if hasattr(ticker_info, 'ticker'):
                    ticker = ticker_info.ticker
                    company = ticker_info.nom_entreprise
                else:
                    ticker = ticker_info.get('ticker', 'N/A')
                    company = ticker_info.get('nom_entreprise', 'N/A')
                print(f"   üéØ {ticker} - {company}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur dans le Ticker Hunter: {e}")
        return {"tickers_identifies": []}

# --- AGENTS AUGMENT√âS (AVEC OUTILS) ---

def create_augmented_analyst(focus_ticker: str = None) -> AgentExecutor:
    """
    Cr√©e un agent analyste augment√© avec acc√®s √† des outils web et financiers.
    
    Args:
        focus_ticker: Ticker √† analyser en priorit√© (optionnel)
    
    Returns:
        AgentExecutor configur√© avec les outils
    """
    if not llm:
        raise ValueError("LLM non disponible pour cr√©er l'agent augment√©")
    
    # D√©finition des outils disponibles
    tools = []
    
    # Ajout des outils disponibles
    if web_search_tool:
        tools.append(web_search_tool)
    
    tools.extend([get_stock_price, get_market_sentiment])
    
    # Prompt syst√®me pour l'agent augment√©
    focus_instruction = f" Tu te concentres principalement sur {focus_ticker}." if focus_ticker else ""
    
    prompt = ChatPromptTemplate.from_messages([
        ("system", f"""Tu es un analyste financier expert du fonds BERZERK avec acc√®s √† des outils temps r√©el.{focus_instruction}

**Tes outils disponibles :**
- web_search_tool : Recherche d'informations compl√©mentaires sur le web
- get_stock_price : Prix actuel et variation des actions
- get_market_sentiment : Informations sur capitalisation, P/E, volume

**Ton processus d'analyse :**
1. Analyse d'abord la news fournie
2. Utilise tes outils pour v√©rifier le contexte actuel du march√©
3. Recherche des informations compl√©mentaires si n√©cessaire
4. Produis une analyse compl√®te et nuanc√©e

**R√®gles importantes :**
- Utilise tes outils de mani√®re strat√©gique (pas syst√©matiquement)
- Mentionne si le march√© a d√©j√† r√©agi √† la news
- Contextualise tes recommandations avec les donn√©es temps r√©el
- Sois pr√©cis et actionnable dans tes conclusions"""),
        
        ("user", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ])
    
    # Cr√©ation de l'agent
    agent = create_tool_calling_agent(llm, tools, prompt)
    
    # Cr√©ation de l'ex√©cuteur
    agent_executor = AgentExecutor(
        agent=agent,
        tools=tools,
        verbose=True,  # Pour voir le processus de r√©flexion
        max_iterations=5,  # Limiter les it√©rations pour √©viter les boucles
        early_stopping_method="generate"  # Arr√™t anticip√© si n√©cessaire
    )
    
    return agent_executor

def run_augmented_analysis(ticker: str, news_summary: str, full_article_text: str) -> str:
    """
    Ex√©cute une analyse augment√©e avec acc√®s aux outils externes.
    
    Args:
        ticker: Ticker √† analyser
        news_summary: R√©sum√© de la news
        full_article_text: Texte complet de l'article
    
    Returns:
        Analyse compl√®te avec donn√©es temps r√©el
    """
    try:
        # Cr√©ation de l'agent augment√© pour ce ticker
        agent_executor = create_augmented_analyst(focus_ticker=ticker)
        
        # Pr√©paration de la requ√™te
        query = f"""
        Analyse l'impact de cette news sur l'action {ticker}.
        
        **R√©sum√© de la news :**
        {news_summary}
        
        **Texte complet :**
        {full_article_text[:2000]}...  # Limitation pour √©viter les tokens excessifs
        
        **Ta mission :**
        1. V√©rifie le prix actuel et la variation de {ticker}
        2. Recherche des informations compl√©mentaires si n√©cessaire
        3. √âvalue si le march√© a d√©j√† int√©gr√© cette news
        4. Produis une recommandation d'investissement pr√©cise
        
        Utilise tes outils pour avoir une vision compl√®te du contexte actuel !
        """
        
        # Ex√©cution de l'analyse
        result = agent_executor.invoke({"input": query})
        
        return result.get("output", "Erreur dans l'analyse augment√©e")
        
    except Exception as e:
        return f"‚ùå **Erreur dans l'analyse augment√©e :** {str(e)}"

# --- FONCTIONS UTILITAIRES ---

def get_available_agents() -> List[str]:
    """Retourne la liste des agents disponibles."""
    return list(AGENT_PROFILES.keys())

def get_agent_description(agent_type: str) -> str:
    """Retourne une description d'un agent sp√©cifique."""
    descriptions = {
        "analyste_actions": "Sp√©cialis√© dans l'analyse d'actions individuelles et de tickers sp√©cifiques",
        "analyste_sectoriel": "Expert en analyse de secteurs d'activit√© et dynamiques industrielles",
        "strategiste_geopolitique": "Sp√©cialis√© dans l'analyse g√©opolitique et macro√©conomique"
    }
    return descriptions.get(agent_type, "Agent non reconnu")

# --- FONCTION DE TEST ---

def test_agents_module():
    """Fonction de test pour v√©rifier le bon fonctionnement du module."""
    print("üß™ Test du module agents.py")
    print("-" * 50)
    
    # Test 1: V√©rification des profils
    print(f"‚úÖ {len(AGENT_PROFILES)} profils d'agents charg√©s")
    for agent_type in AGENT_PROFILES.keys():
        print(f"   - {agent_type}: {get_agent_description(agent_type)}")
    
    # Test 2: Test du routeur
    test_entities = ["AAPL", "TSLA", "Technologie", "Intelligence Artificielle"]
    test_summary = "Apple et Tesla annoncent un partenariat dans l'IA automobile"
    
    print(f"\nüîÄ Test du routeur avec entit√©s: {test_entities}")
    selected_agents = route_to_agents(test_entities, test_summary)
    print(f"‚úÖ Agents s√©lectionn√©s: {selected_agents}")
    
    print("\nüéØ Module agents.py pr√™t √† l'emploi !")

if __name__ == "__main__":
    test_agents_module() 