#!/usr/bin/env python3
"""
üßπ BERZERK RESET & ANALYZE - Nettoyage et Relance des Analyses
==============================================================

Ce script nettoie les anciennes analyses et relance les 20 derni√®res
news avec les nouveaux agents augment√©s (Phase 5).
"""

import sqlite3
import sys
import json
from datetime import datetime
from orchestrator import run_berzerk_pipeline

def reset_analyses():
    """
    Nettoie les anciennes analyses de la base de donn√©es
    """
    print("üßπ Nettoyage des anciennes analyses...")
    
    conn = sqlite3.connect('berzerk.db')
    cursor = conn.cursor()
    
    # Remettre √† z√©ro les analyses
    cursor.execute('''
        UPDATE articles 
        SET decision_json = NULL, 
            status = "pending", 
            analyzed_at = NULL 
        WHERE decision_json IS NOT NULL
    ''')
    
    updated = cursor.rowcount
    conn.commit()
    
    # Compter les articles en attente
    cursor.execute('SELECT COUNT(*) FROM articles WHERE status = "pending"')
    pending = cursor.fetchone()[0]
    
    conn.close()
    
    print(f"‚úÖ {updated} anciennes analyses supprim√©es")
    print(f"üìù {pending} articles en attente d'analyse")
    
    return pending

def get_latest_articles(limit=20):
    """
    R√©cup√®re les derniers articles en attente
    """
    print(f"üîç R√©cup√©ration des {limit} derniers articles...")
    
    conn = sqlite3.connect('berzerk.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, title, link, published_date 
        FROM articles 
        WHERE status = "pending" 
        ORDER BY published_date DESC 
        LIMIT ?
    ''', (limit,))
    
    articles = cursor.fetchall()
    conn.close()
    
    print(f"‚úÖ {len(articles)} articles r√©cup√©r√©s")
    return articles

def save_decision_to_db(article_id: int, decision_result: dict) -> bool:
    """
    Sauvegarde une d√©cision d'investissement dans la base de donn√©es
    """
    try:
        conn = sqlite3.connect('berzerk.db')
        cursor = conn.cursor()
        
        # Extraire les informations cl√©s de la d√©cision
        final_decision = decision_result.get('final_decision', {})
        
        # Gestion des objets Pydantic pour final_decision
        if hasattr(final_decision, 'decision'):
            # Objet Pydantic
            decision_action = final_decision.decision
            decision_ticker = final_decision.ticker
            decision_confiance = final_decision.confiance
            decision_justification = final_decision.justification_synthetique
            decision_allocation = final_decision.allocation_capital_pourcentage
            decision_positifs = final_decision.points_cles_positifs
            decision_negatifs = final_decision.points_cles_negatifs_risques
        else:
            # Dictionnaire classique
            decision_action = final_decision.get('decision', 'ERREUR')
            decision_ticker = final_decision.get('ticker', None)
            decision_confiance = final_decision.get('confiance', 'INCONNUE')
            decision_justification = final_decision.get('justification_synthetique', 'Aucune justification')
            decision_allocation = final_decision.get('allocation_capital_pourcentage', 0.0)
            decision_positifs = final_decision.get('points_cles_positifs', [])
            decision_negatifs = final_decision.get('points_cles_negatifs_risques', [])
        
        # Pr√©parer la d√©cision format√©e pour la base de donn√©es
        decision_data = {
            'action': decision_action,
            'ticker': decision_ticker,
            'confiance': decision_confiance,
            'justification': decision_justification,
            'allocation_pourcentage': decision_allocation,
            'points_positifs': decision_positifs,
            'points_negatifs': decision_negatifs,
            'tickers_identifies': decision_result.get('actionable_tickers', []),
            'timestamp': datetime.now().isoformat()
        }
        
        # Sauvegarder dans la base de donn√©es
        cursor.execute('''
            UPDATE articles 
            SET decision_json = ?, 
                status = "analyzed", 
                analyzed_at = ? 
            WHERE id = ?
        ''', (json.dumps(decision_data), datetime.now().isoformat(), article_id))
        
        conn.commit()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        return False

def analyze_articles(articles):
    """
    Lance l'analyse des articles avec les nouveaux agents augment√©s
    """
    print(f"üöÄ Lancement des analyses avec les agents augment√©s...")
    print("-" * 60)
    
    successful_analyses = 0
    failed_analyses = 0
    saved_decisions = 0
    
    for i, (article_id, title, link, published_date) in enumerate(articles, 1):
        print(f"\nüî¨ [{i}/{len(articles)}] Analyse: {title[:50]}...")
        
        try:
            # Simuler un capital de test
            capital = 10000
            
            # Lancer le pipeline BERZERK complet
            result = run_berzerk_pipeline(link, capital)
            
            if result and not result.get('error'):
                successful_analyses += 1
                print(f"‚úÖ Analyse termin√©e avec succ√®s")
                
                # Sauvegarder la d√©cision dans la base de donn√©es
                if save_decision_to_db(article_id, result):
                    saved_decisions += 1
                    print(f"üíæ D√©cision sauvegard√©e dans la base de donn√©es")
                    
                    # Afficher la d√©cision si disponible
                    if result.get('final_decision'):
                        decision = result['final_decision']
                        action = decision.get('decision', 'N/A')
                        ticker = decision.get('ticker', 'N/A')
                        allocation = decision.get('allocation_capital_pourcentage', 0)
                        print(f"üéØ D√©cision: {action} {ticker} ({allocation}%)")
                else:
                    print("‚ùå √âchec de la sauvegarde")
            else:
                failed_analyses += 1
                print(f"‚ùå √âchec de l'analyse: {result.get('error', 'Erreur inconnue')}")
                
        except Exception as e:
            failed_analyses += 1
            print(f"‚ùå Erreur lors de l'analyse: {e}")
    
    print(f"\nüìä R√âSULTATS DES ANALYSES")
    print("-" * 30)
    print(f"‚úÖ Analyses r√©ussies: {successful_analyses}")
    print(f"üíæ D√©cisions sauvegard√©es: {saved_decisions}")
    print(f"‚ùå Analyses √©chou√©es: {failed_analyses}")
    print(f"üìà Taux de r√©ussite: {(successful_analyses / len(articles)) * 100:.1f}%")
    
    return successful_analyses

def main():
    """
    Fonction principale
    """
    print("üéØ BERZERK RESET & ANALYZE")
    print("=" * 50)
    
    # √âtape 1: Nettoyer les anciennes analyses
    pending_count = reset_analyses()
    
    if pending_count == 0:
        print("‚ö†Ô∏è  Aucun article en attente d'analyse")
        return
    
    # √âtape 2: R√©cup√©rer les derniers articles
    articles = get_latest_articles(20)
    
    if not articles:
        print("‚ùå Aucun article trouv√©")
        return
    
    # √âtape 3: Analyser les articles
    successful = analyze_articles(articles)
    
    print(f"\nüèÅ TERMIN√â !")
    print(f"üìä {successful} nouvelles analyses avec agents augment√©s")
    print(f"üí° Vous pouvez maintenant relancer: python backtester.py")

if __name__ == "__main__":
    main() 